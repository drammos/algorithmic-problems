Εργασια 2

Μελη ομαδας:

    - Ιωάννα Οικονόμου 1115201900137
    - Δημήτριος Ράμμος 1125201900161

Σχετικα με τους αλγοριθμους της εργασιας:

    Απο την εργασια εχουμε υλοποιησει τους δυο πρωτους αλγορίθμους, τον local search και τον simulated annealing.
    Η Ιωαννα Οικονόμου ανελαβε να φερει εις περας τον πρωτο αλγοριθμο, Local Search Algorithm.
    Ο Δημήτριος Ράμμος ανελαβε να φερει εις περας τον δευτερο αλγοριθμο, Simulated Annealing Algorithm.
    
    Ο τριτος και τελευταιος αλγοριθμος δεν υλοποιηθηκε καθως η ομαδα μας ειναι δυο(2) ατομων.

Εκκινηση αλγοριθμου:

    Τρεχουμε τους αλγοριθμους μας με την CGAL.5.5.1
    Επομενως αφου εγκαταστησετε την GGAL ακολουθηστε τα παρακατω βηματα:

        - Στα παραδοτέα θα βρειτε ενα αρχειο CMakeLists.txt, χρησιμοποιηστε αυτο για την μεταγλωττιση του
            προγραμματος. Τρέξτε cmake -DCGAL_DIR=/usr/lib/CGAL . για να φτιαχτεί το Makefile.
        
        - Με την παρακατω εντολη θα μεταγλωττισετε τα αρχεια:
            $ make
        
        - Επειτα για να εκκινησετε το προγραμμα τρεξτε την παρακατω εντολη:
            $ ./optimal_polygon -i <input-file> -o <output-file> -algorithm <local_search or simulated_annealing> -L <L parameter according to algorithm>
            –max <maximal area polygonization> –min <minimal area polygonization> –threshold <double> [in local search] –annealing <"local" or "global" or "subdivision" in simulated annealing>

                - Οπου, <input-file> το αρχειο εισοδου που ακολουθα την παρακατω μορφη:

                    # <γραμμή περιγραφής σημειοσυνόλου>
                    # parameters "convex_hull": {"area": "Χ"} // όπου Χ η επιφάνεια του ΚΠ2
                    0 x0 y0
                    1 x1 y1
                    … … …
                    n-1 xn yn

                    όπου n είναι το πλήθος των σημείων του σημειοσυνόλου και xi, yi οι συντεταγμένες (θετικοί ακέραιοι).

                - Οπου, <output-file>  το αρχειο για την εκτυπωση αποτελεσματων.
                    Για παραδειγμα εχει την μορφη:
                    
                    Optimal Area Polygonization
                    0 0
                    4 0
                    4 4
                    0 0 4 0
                    4 0 4 4
                    4 4 0 0
                    Algorithm: <local_search or simulated_annealing>_[max or min]
                    area_initial <double> [only in local search and simulated annealing]
                    area: <double>
                    ratio_initial <double> [only in local search and simulated annealing]
                    ratio: <double
                    construction time: <milliseconds as integer>
                    
Κατάλογος αρχείων:
    Στο παραδοτέο μπορείτε να βρείτε τα παρακάτω αρχεία:
        -main.cpp ->περιέχει τη συνάρτηση main.
        -incremental.cpp ->περιέχει την υλοποίηση του πρώτου αλγορίθμου της πρώτης εργασίας.
        -incremental.hpp ->περιέχει τις απαραίτητες δηλώσεις για τον πρώτο αλγόριθμο της πρώτης εργασίας.
        -convex_hull_algorithmic.cpp ->περιέχει την υλοποίηση του δεύτερου αλγορίθμου της πρώτης εργασίας.
        -convex_hull_algorithmic.hpp ->περιέχει τις απαραίτητες δηλώσεις για τον δεύτερο αλγόριθμο της πρώτης εργασίας.
        -local_search.cpp ->περιέχει την υλοποίηση του πρώτου αλγορίθμου της δεύτερης εργασίας.
        -local_search.hpp ->περίχει την υλοποίηση του πρώτου αλγορίθμου της δεύτερης εργασίας.
        -CMakeLists.txt ->απαραίτητο αρχείο για τη μετταγλώτιση του προγγράμματος.
        -Το παρόν readme.

Για την main.cpp:

    Διαβαζουμε τα ορισματα απο την γραμμη εντολων επειτα διαβαζουμε το αρχειο εισοδου και αποθηκευουμε 
    τα points σε ενα vector. Επειτα τρέχουμε έναν από τους αλγορίθμους της πρώτης εργασίας για να δημιουργηθεί το πολύγωνο 
    και στη συνέχεια αναλογα τον αλγοριθμο επιλογης απο την γραμμη εντολων επιλεγουμε τον αλγοριθμο βελτιστοποίησης
    με τα καταλληλα ορισματα.

Για τον local search algorithm:

    Η υλοποίηση του συγκεκριμένου αλγορίθμου αποτελείται από μια κεντρική συνάρτηση που ονομάζεται local_search και από τις παρακάτω
    επιμέρους συναρτήσεις: 
        -find_paths()->βρίσκει όλα τα πιθανά μονοπάτια του πολυγώνου.
        -remove_path()->αφαιρεί το εκάστοτε μονοπάτι από το υπάρχον πολύγωνο.
        -change_path()->τοποθετεί το εκάστοτε μονοπάτι ανάμεσα στα άκρα μιας συγκεκριμένης ακμής.

    Ο αλγόριθμος δέχεται το πολύγωνο που έχει επιστρέψει κάποιος από τους αλγορίθμους της πρώτης εργασίας και βρίσκει όλα τα πιθανά paths
    μήκους L που υπάρχουν σε αυτό. Στη συνέχεια για κάθε ένα από αυτά τα μονοπάτια ελέγχει σε ποιά άλλη ακμή του πολυγώνου θα μπορούσε
    να μεταφερθεί ετσι ώστε το εμβαδόν να γίνει μέγιστο ή ελάχιστο. 

    Ο έλεγχος αυτός γίνεται με τον εξής τρόπο:

    Αρχικά, το εκάστοτε μονοπαι αφαιρείται από το αρχικό πολύγωνο. 

    Στη συνέχεια, ελέγχεται τι θα συμβει αν μεταφέρουμε αυτό το μονοπάτι ανάμεσα στα άκρα της ακμής που ελέγχεται κάθε φορά.
    Αν το πολύγωνο που προκύπτει είναι κανονικό και το εμβαδόν του μικραίνει ή μεγαλώνει ανάλογα με το τι θέλουμε, τότε το 
    προσθέτουμε στα υποψήφια νέα πολύγωνα.

    Αφού αυτός ο έλεγχος ολοκληρωθεί για κάθε μονοπάτι και για κάθε ακμή του πολυγώνου, τότε κρατάμε το υποψήφιο πολύγωνο που 
    δίνει το μέγιστο ή ελάχιστο εμβαδόν, ανάλογα τις παραμέτρους.
